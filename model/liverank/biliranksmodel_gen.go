// Code generated by goctl. DO NOT EDIT!

package liverank

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	biliRanksFieldNames          = builder.RawFieldNames(&BiliRanks{})
	biliRanksRows                = strings.Join(biliRanksFieldNames, ",")
	biliRanksRowsExpectAutoSet   = strings.Join(stringx.Remove(biliRanksFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	biliRanksRowsWithPlaceHolder = strings.Join(stringx.Remove(biliRanksFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheBiliRanksIdPrefix = "cache:biliRanks:id:"
)

type (
	biliRanksModel interface {
		Insert(ctx context.Context, data *BiliRanks) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BiliRanks, error)
		Update(ctx context.Context, data *BiliRanks) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBiliRanksModel struct {
		sqlc.CachedConn
		table string
	}

	BiliRanks struct {
		Id        int64        `db:"id"`
		CreatedAt sql.NullTime `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
		Buid      int64        `db:"buid"`
		RoomId    int64        `db:"room_id"`
		Rank      int64        `db:"rank"`
		GiftValue int64        `db:"gift_value"`
		IsConcern float64      `db:"is_concern"`
	}
)

func newBiliRanksModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBiliRanksModel {
	return &defaultBiliRanksModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`bili_ranks`",
	}
}

func (m *defaultBiliRanksModel) Delete(ctx context.Context, id int64) error {
	biliRanksIdKey := fmt.Sprintf("%s%v", cacheBiliRanksIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, biliRanksIdKey)
	return err
}

func (m *defaultBiliRanksModel) FindOne(ctx context.Context, id int64) (*BiliRanks, error) {
	biliRanksIdKey := fmt.Sprintf("%s%v", cacheBiliRanksIdPrefix, id)
	var resp BiliRanks
	err := m.QueryRowCtx(ctx, &resp, biliRanksIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", biliRanksRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBiliRanksModel) Insert(ctx context.Context, data *BiliRanks) (sql.Result, error) {
	biliRanksIdKey := fmt.Sprintf("%s%v", cacheBiliRanksIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, biliRanksRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Buid, data.RoomId, data.Rank, data.GiftValue, data.IsConcern)
	}, biliRanksIdKey)
	return ret, err
}

func (m *defaultBiliRanksModel) Update(ctx context.Context, data *BiliRanks) error {
	biliRanksIdKey := fmt.Sprintf("%s%v", cacheBiliRanksIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, biliRanksRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Buid, data.RoomId, data.Rank, data.GiftValue, data.IsConcern, data.Id)
	}, biliRanksIdKey)
	return err
}

func (m *defaultBiliRanksModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBiliRanksIdPrefix, primary)
}

func (m *defaultBiliRanksModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", biliRanksRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBiliRanksModel) tableName() string {
	return m.table
}
