// Code generated by goctl. DO NOT EDIT!

package liverank

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	biliRanksFieldNames          = builder.RawFieldNames(&BiliRanks{})
	biliRanksRows                = strings.Join(biliRanksFieldNames, ",")
	biliRanksRowsExpectAutoSet   = strings.Join(stringx.Remove(biliRanksFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	biliRanksRowsWithPlaceHolder = strings.Join(stringx.Remove(biliRanksFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	biliRanksModel interface {
		Insert(ctx context.Context, data *BiliRanks) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BiliRanks, error)
		Update(ctx context.Context, data *BiliRanks) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBiliRanksModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BiliRanks struct {
		Id        int64 `db:"id"`
		Timestamp int64 `db:"timestamp"`
		Buid      int64 `db:"buid"`
		RoomId    int64 `db:"room_id"`
		Rank      int64 `db:"rank"`
		GiftValue int64 `db:"gift_value"`
		IsConcern int64 `db:"is_concern"`
	}
)

func newBiliRanksModel(conn sqlx.SqlConn) *defaultBiliRanksModel {
	return &defaultBiliRanksModel{
		conn:  conn,
		table: "`bili_ranks`",
	}
}

func (m *defaultBiliRanksModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBiliRanksModel) FindOne(ctx context.Context, id int64) (*BiliRanks, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", biliRanksRows, m.table)
	var resp BiliRanks
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBiliRanksModel) Insert(ctx context.Context, data *BiliRanks) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, biliRanksRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Timestamp, data.Buid, data.RoomId, data.Rank, data.GiftValue, data.IsConcern)
	return ret, err
}

func (m *defaultBiliRanksModel) Update(ctx context.Context, data *BiliRanks) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, biliRanksRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Timestamp, data.Buid, data.RoomId, data.Rank, data.GiftValue, data.IsConcern, data.Id)
	return err
}

func (m *defaultBiliRanksModel) tableName() string {
	return m.table
}
