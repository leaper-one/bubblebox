// Code generated by goctl. DO NOT EDIT!
// Source: liverank.proto

package liverank

import (
	"context"

	"github.com/leaper-one/bubblebox/rpc/liverank-rpc/types/liverank"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetRankRequest      = liverank.GetRankRequest
	GetRankResponse     = liverank.GetRankResponse
	MarkConcernRequest  = liverank.MarkConcernRequest
	MarkConcernResponse = liverank.MarkConcernResponse
	Rank                = liverank.Rank
	SubmitRankRequest   = liverank.SubmitRankRequest
	SubmitRankResponse  = liverank.SubmitRankResponse

	Liverank interface {
		//  客户端提交排名
		SubmitRank(ctx context.Context, in *SubmitRankRequest, opts ...grpc.CallOption) (*SubmitRankResponse, error)
		//  客户端获取排名
		GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error)
		//  关注某个直播间的某个已有投稿的用户
		MarkConcern(ctx context.Context, in *MarkConcernRequest, opts ...grpc.CallOption) (*MarkConcernResponse, error)
	}

	defaultLiverank struct {
		cli zrpc.Client
	}
)

func NewLiverank(cli zrpc.Client) Liverank {
	return &defaultLiverank{
		cli: cli,
	}
}

//  客户端提交排名
func (m *defaultLiverank) SubmitRank(ctx context.Context, in *SubmitRankRequest, opts ...grpc.CallOption) (*SubmitRankResponse, error) {
	client := liverank.NewLiverankClient(m.cli.Conn())
	return client.SubmitRank(ctx, in, opts...)
}

//  客户端获取排名
func (m *defaultLiverank) GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error) {
	client := liverank.NewLiverankClient(m.cli.Conn())
	return client.GetRank(ctx, in, opts...)
}

//  关注某个直播间的某个已有投稿的用户
func (m *defaultLiverank) MarkConcern(ctx context.Context, in *MarkConcernRequest, opts ...grpc.CallOption) (*MarkConcernResponse, error) {
	client := liverank.NewLiverankClient(m.cli.Conn())
	return client.MarkConcern(ctx, in, opts...)
}
