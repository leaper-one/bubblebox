// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: liverank.proto

package liverank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiverankClient is the client API for Liverank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiverankClient interface {
	// 客户端提交排名
	SubmitRank(ctx context.Context, in *SubmitRankRequest, opts ...grpc.CallOption) (*SubmitRankResponse, error)
	// 客户端获取排名
	GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error)
	// 关注某个直播间的某个已有投稿的用户
	MarkConcern(ctx context.Context, in *MarkConcernRequest, opts ...grpc.CallOption) (*MarkConcernResponse, error)
}

type liverankClient struct {
	cc grpc.ClientConnInterface
}

func NewLiverankClient(cc grpc.ClientConnInterface) LiverankClient {
	return &liverankClient{cc}
}

func (c *liverankClient) SubmitRank(ctx context.Context, in *SubmitRankRequest, opts ...grpc.CallOption) (*SubmitRankResponse, error) {
	out := new(SubmitRankResponse)
	err := c.cc.Invoke(ctx, "/liverank.Liverank/SubmitRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liverankClient) GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error) {
	out := new(GetRankResponse)
	err := c.cc.Invoke(ctx, "/liverank.Liverank/GetRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liverankClient) MarkConcern(ctx context.Context, in *MarkConcernRequest, opts ...grpc.CallOption) (*MarkConcernResponse, error) {
	out := new(MarkConcernResponse)
	err := c.cc.Invoke(ctx, "/liverank.Liverank/MarkConcern", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiverankServer is the server API for Liverank service.
// All implementations must embed UnimplementedLiverankServer
// for forward compatibility
type LiverankServer interface {
	// 客户端提交排名
	SubmitRank(context.Context, *SubmitRankRequest) (*SubmitRankResponse, error)
	// 客户端获取排名
	GetRank(context.Context, *GetRankRequest) (*GetRankResponse, error)
	// 关注某个直播间的某个已有投稿的用户
	MarkConcern(context.Context, *MarkConcernRequest) (*MarkConcernResponse, error)
	mustEmbedUnimplementedLiverankServer()
}

// UnimplementedLiverankServer must be embedded to have forward compatible implementations.
type UnimplementedLiverankServer struct {
}

func (UnimplementedLiverankServer) SubmitRank(context.Context, *SubmitRankRequest) (*SubmitRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRank not implemented")
}
func (UnimplementedLiverankServer) GetRank(context.Context, *GetRankRequest) (*GetRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRank not implemented")
}
func (UnimplementedLiverankServer) MarkConcern(context.Context, *MarkConcernRequest) (*MarkConcernResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkConcern not implemented")
}
func (UnimplementedLiverankServer) mustEmbedUnimplementedLiverankServer() {}

// UnsafeLiverankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiverankServer will
// result in compilation errors.
type UnsafeLiverankServer interface {
	mustEmbedUnimplementedLiverankServer()
}

func RegisterLiverankServer(s grpc.ServiceRegistrar, srv LiverankServer) {
	s.RegisterService(&Liverank_ServiceDesc, srv)
}

func _Liverank_SubmitRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiverankServer).SubmitRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liverank.Liverank/SubmitRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiverankServer).SubmitRank(ctx, req.(*SubmitRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Liverank_GetRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiverankServer).GetRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liverank.Liverank/GetRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiverankServer).GetRank(ctx, req.(*GetRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Liverank_MarkConcern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkConcernRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiverankServer).MarkConcern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liverank.Liverank/MarkConcern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiverankServer).MarkConcern(ctx, req.(*MarkConcernRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Liverank_ServiceDesc is the grpc.ServiceDesc for Liverank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Liverank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "liverank.Liverank",
	HandlerType: (*LiverankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitRank",
			Handler:    _Liverank_SubmitRank_Handler,
		},
		{
			MethodName: "GetRank",
			Handler:    _Liverank_GetRank_Handler,
		},
		{
			MethodName: "MarkConcern",
			Handler:    _Liverank_MarkConcern_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liverank.proto",
}
